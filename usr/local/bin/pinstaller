#!/bin/bash

# pinstaller.sh: A script to manage software installations

# Define the directory for the installers
INSTALLER_DIR="/tmp/pinstaller-installers"

# Check if the script is run with sudo
if [[ "$EUID" -ne 0 ]]; then
  echo "Please run this script with sudo."
  exit 1
fi

# Clone the repository to fetch the latest installers
if [ ! -d "$INSTALLER_DIR" ]; then
  echo "Cloning the pinstaller-installers repository..."
  git clone https://github.com/pratham2542/pinstaller-installer.git "$INSTALLER_DIR"
else
  echo "Updating the pinstaller-installers repository..."
  git -C "$INSTALLER_DIR" pull
fi

# Ensure the 'dialog' utility is installed
echo "Checking for 'dialog' utility..."
if ! command -v dialog > /dev/null 2>&1; then
  echo "'dialog' is not installed. Installing it now..."
  if sudo apt install -y dialog; then
    echo "'dialog' installed successfully."
  else
    echo "Failed to install 'dialog'. Please check your system and try again."
    exit 1
  fi
else
  echo "'dialog' is already installed."
fi

# Generate the list of available programs dynamically
program_options=()
counter=1
for dir in "$INSTALLER_DIR"/*; do
  if [ -d "$dir" ]; then
    program_name=$(basename "$dir")
    program_options+=("$counter" "$program_name")
    ((counter++))
  fi
done

# Display a dynamic menu with the list of programs
program=$(dialog --clear --title "Program Installer" \
  --menu "Select a program to install:" 15 50 ${#program_options[@]} \
  "${program_options[@]}" \
  2>&1 >/dev/tty)

# Check if the user clicked cancel (exit code 1)
if [ $? -ne 0 ]; then
  clear
  echo "No program selected. Exiting..."
  exit 0
fi

clear  # Clear the dialog screen

# Map selection to program name
selected_program_index=$((($program - 1) * 2 + 1))
program_name=${program_options[$selected_program_index]}

# Generate package manager options dynamically based on available directories
managers=()
counter=1
for dir in "$INSTALLER_DIR/$program_name/"*; do
  if [ -d "$dir" ]; then
    manager_name=$(basename "$dir")
    managers+=("$counter" "$manager_name")
    ((counter++))
  fi
done

# Display the package manager selection dynamically
manager=$(dialog --clear --title "Select Package Manager" \
  --menu "Choose a package manager for $program_name:" 15 50 ${#managers[@]} \
  "${managers[@]}" \
  2>&1 >/dev/tty)

# Check if the user clicked cancel (exit code 1)
if [ $? -ne 0 ]; then
  clear
  echo "No package manager selected. Exiting..."
  exit 0
fi

clear  # Clear the dialog screen

# Map selection to manager name
selected_manager_index=$((($manager - 1) * 2 + 1))
manager_name=${managers[$selected_manager_index]}

# Run the installation script
if [ -f "$INSTALLER_DIR/$program_name/$manager_name/install.sh" ]; then
  bash "$INSTALLER_DIR/$program_name/$manager_name/install.sh"
else
  echo "Installation script for $program_name with $manager_name not found."
  exit 1
fi

exit 0
